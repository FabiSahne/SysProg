#ifndef FACHNOTENLISTE_H
#define FACHNOTENLISTE_H

#include <memory>

class fachnoten_liste final {
private:
    class element;
    // head siehe unten

public:
    fachnoten_liste();

    // ~intlist() = default;
    // entity class ohne Kopiersemantik
    fachnoten_liste(fachnoten_liste &) = delete;

    fachnoten_liste &operator=(fachnoten_liste &) = delete;

    // entity class hier mit Move-Semantik
    fachnoten_liste(fachnoten_liste &&) = default;

    fachnoten_liste &operator=(fachnoten_liste &&) = default;

    fachnoten_liste &insert(fachnote);

    class iterator final {
    private:
        element *current;

        explicit iterator(element *);

    public:
        bool operator!=(const iterator &) const;

        int &operator*() const;

        iterator &operator++();

        friend class fachnoten_liste;
    };

    iterator begin();

    iterator end();

private:
    class element final {
        std::unique_ptr<element> next;
        int n;

        element(element *e, int m) : next(e), n(m) {}

        friend class fachnoten_liste;

        friend class fachnoten_liste::iterator;
    };

    std::unique_ptr<element> head;
};

#endif