  fabian  ~    SysProg  aufgabe3 [  main ≡  ?1 -2 ] javac Stringsort.java 
  fabian  ~    SysProg  aufgabe3 [  main ≡  ?1 -2 ] java Stringsort 200
Unsortiertes Array:
97 115 165 107 190 118 161 98 141 52 67 36 11 103 131 23 146 160 189 0 20 156 175 12 70 43 51 171 71 113 140 54 179 134 70 177 88 48 135 100 196 104 91 91 105 18 145 198 47 157 96 155 108 59 108 190 122 99 179 90 117 18 191 122 199 168 184 169 114 190 47 167 82 37 49 28 76 193 174 15 87 37 189 32 54 153 38 132 102 102 19 190 194 129 84 10 145 94 118 181 89 68 95 40 170 166 40 19 129 106 127 7 23 146 152 60 190 0 136 161 168 119 142 121 99 84 14 122 141 123 84 130 176 30 161 74 41 193 124 196 83 88 16 113 4 137 174 155 56 167 15 17 2 75 48 57 20 175 195 15 38 77 94 84 91 177 130 194 164 128 153 180 39 16 69 2 56 158 9 113 170 87 175 129 41 22 94 81 7 196 20 101 178 62 56 175 135 40 165 132 
Sortiertes Array:
0* 10 100 101 102* 103 104 105 106 107 108* 11 113** 114 115 117 118* 119 12 121 122** 123 124 127 128 129** 130* 131 132* 134 135* 136 137 14 140 141* 142 145* 146* 15** 152 153* 155* 156 157 158 16* 160 161** 164 165* 166 167* 168* 169 17 170* 171 174* 175*** 176 177* 178 179* 18* 180 181 184 189* 19* 190**** 191 193* 194* 195 196** 198 199 2* 20** 22 23* 28 30 32 36 37* 38* 39 4 40** 41* 43 47* 48* 49 51 52 54* 56** 57 59 60 62 67 68 69 7* 70* 71 74 75 76 77 81 82 83 84*** 87* 88* 89 9 90 91** 94** 95 96 97 98 99*
  fabian  ~    SysProg  aufgabe3 [  main ≡  ?1 -2 ] make
gcc -g -Wall -Wextra -Werror -Wvla -std=c11 -pedantic    stringsort.c   -o stringsort
  fabian  ~    SysProg  aufgabe3 [  main ≡  ?1 ~1 -1 ] ./stringsort 200
Unsortiertes Array:
124 74 120 106 164 147 190 83 167 144 92 92 117 0 117 46 164 198 25 151 7 87 151 86 35 103 144 175 148 3 31 24 29 103 130 193 50 121 28 169 65 72 61 134 73 130 180 37 128 5 140 135 92 92 173 80 195 117 7 95 72 190 120 101 93 50 47 95 123 27 64 141 52 125 75 125 7 8 114 135 165 6 22 10 50 147 90 198 64 97 93 88 39 13 141 132 16 188 27 91 168 91 184 20 168 60 97 175 20 11 62 185 169 36 195 20 183 37 18 47 86 111 135 125 77 28 57 45 17 36 136 137 79 121 157 47 133 54 174 105 17 36 90 186 72 38 6 55 75 24 54 162 88 141 39 165 170 97 162 139 85 50 76 165 171 33 164 56 39 139 161 8 127 4 194 0 42 153 7 69 177 62 183 17 3 23 134 125 72 96 64 157 147 140 74 70 125 39 79 116 
Sortiertes Array:
0* 10 101 103* 105 106 11 111 114 116 117** 120* 121* 123 124 125**** 127 128 13 130* 132 133 134* 135** 136 137 139* 140* 141** 144* 147** 148 151* 153 157* 16 161 162* 164** 165** 167 168* 169* 17** 170 171 173 174 175* 177 18 180 183* 184 185 186 188 190* 193 194 195* 198* 20** 22 23 24* 25 27* 28* 29 3* 31 33 35 36** 37* 38 39*** 4 42 45 46 47** 5 50*** 52 54* 55 56 57 6* 60 61 62* 64** 65 69 7*** 70 72*** 73 74* 75* 76 77 79* 8* 80 83 85 86* 87 88* 90* 91* 92*** 93* 95* 96 97**
  fabian  ~    SysProg  aufgabe3 [  main ≡  ?1 ~1 -1 ] valgrind ./stringsort 200
==16081== Memcheck, a memory error detector
==16081== Copyright (C) 2002-2022, and GNU GPL'd, by Julian Seward et al.
==16081== Using Valgrind-3.21.0 and LibVEX; rerun with -h for copyright info
==16081== Command: ./stringsort 200
==16081== 
Unsortiertes Array:
40 175 99 39 179 189 134 148 8 198 112 163 166 33 176 192 29 35 124 152 40 19 12 131 103 155 67 80 25 119 62 65 94 113 104 26 102 191 126 63 189 38 26 107 72 154 51 53 190 127 157 182 147 169 66 50 124 133 130 150 4 144 167 51 57 24 29 160 15 155 23 156 194 1 15 18 108 66 71 98 145 29 32 92 150 98 95 75 32 177 177 36 122 96 87 131 120 116 43 87 24 18 195 18 20 10 36 128 28 59 178 174 88 10 18 191 109 113 18 93 43 147 129 165 43 169 48 116 37 92 3 61 110 151 79 82 113 67 162 142 127 140 68 167 103 38 158 12 152 128 57 147 75 138 112 119 107 112 187 97 4 190 110 115 93 190 149 7 9 112 149 136 4 169 56 107 7 14 71 111 143 128 58 170 67 122 41 126 35 28 23 191 171 134 58 64 76 8 71 37 
Sortiertes Array:
1 10* 102 103* 104 107** 108 109 110* 111 112*** 113** 115 116* 119* 12* 120 122* 124* 126* 127* 128** 129 130 131* 133 134* 136 138 14 140 142 143 144 145 147** 148 149* 15* 150* 151 152* 154 155* 156 157 158 160 162 163 165 166 167* 169** 170 171 174 175 176 177* 178 179 18**** 182 187 189* 19 190** 191** 192 194 195 198 20 23* 24* 25 26* 28* 29** 3 32* 33 35* 36* 37* 38* 39 4** 40* 41 43** 48 50 51* 53 56 57* 58* 59 61 62 63 64 65 66* 67** 68 7* 71** 72 75* 76 79 8* 80 82 87* 88 9 92* 93* 94 95 96 97 98* 99
==16081== 
==16081== HEAP SUMMARY:
==16081==     in use at exit: 0 bytes in 0 blocks
==16081==   total heap usage: 203 allocs, 203 frees, 4,405 bytes allocated
==16081== 
==16081== All heap blocks were freed -- no leaks are possible
==16081== 
==16081== For lists of detected and suppressed errors, rerun with: -s
==16081== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
  fabian  ~    SysProg  aufgabe3 [  main ≡  ?1 ~1 -1 ] make cppcheck
cppcheck --enable=warning,style --std=c11 stringsort.c
Checking stringsort.c ...
stringsort.c:25:26: style: Parameter 'argv' can be declared as const array [constParameter]
int main(int argc, char *argv[])
                         ^
Active checkers: 106/565
  fabian  ~    SysProg  aufgabe3 [  main ≡  ?1 ~1 -1 ] 

 ----------------------------------------------------------------------------------------------------------------

  fabian  ~    SysProg  aufgabe3 [  main ≡  ?1 ~1 -1 ] ./stringsort 0
Anzahl muss mindestens 1 sein: Success
  fabian  ~    SysProg  aufgabe3 [  main ≡  ?1 ~1 -1 ] ./stringsort 1
Unsortiertes Array:
0 
Sortiertes Array:
0
  fabian  ~    SysProg  aufgabe3 [  main ≡  ?1 ~1 -1 ] ./stringsort 2
Unsortiertes Array:
0 1 
Sortiertes Array:
0 1
  fabian  ~    SysProg  aufgabe3 [  main ≡  ?1 ~1 -1 ] ./stringsort 20
Unsortiertes Array:
3 4 19 1 0 13 11 4 17 5 17 15 8 5 8 11 15 9 5 9 
Sortiertes Array:
0 1 11* 13 15* 17* 19 3 4* 5** 8* 9*
  fabian  ~    SysProg  aufgabe3 [  main ≡  ?1 ~1 -1 ] ./stringsort 200
Unsortiertes Array:
131 100 165 81 23 88 9 41 128 125 137 166 115 107 32 62 121 114 194 80 28 18 143 56 33 61 50 20 83 152 30 166 52 196 47 75 36 9 68 116 134 5 34 2 65 66 64 138 132 11 170 160 29 65 168 14 127 18 34 162 170 17 129 22 13 128 50 49 137 70 117 24 76 151 178 93 17 194 31 101 5 153 61 186 18 181 1 97 0 187 60 170 4 141 145 169 69 195 170 159 17 87 135 93 38 113 138 7 59 121 108 65 74 121 51 93 103 4 190 55 144 2 177 148 143 122 70 165 69 40 76 87 80 11 132 70 76 23 30 135 144 138 152 19 12 156 64 67 160 54 122 104 57 99 5 0 174 27 117 43 19 193 82 99 156 167 122 32 190 152 120 134 90 24 105 54 180 169 121 141 24 43 197 33 143 154 185 69 181 103 112 1 96 147 100 5 114 22 37 104 
Sortiertes Array:
0* 1* 100* 101 103* 104* 105 107 108 11* 112 113 114* 115 116 117* 12 120 121*** 122** 125 127 128* 129 13 131 132* 134* 135* 137* 138** 14 141* 143** 144* 145 147 148 151 152** 153 154 156* 159 160* 162 165* 166* 167 168 169* 17** 170*** 174 177 178 18** 180 181* 185 186 187 19* 190* 193 194* 195 196 197 2* 20 22* 23* 24** 27 28 29 30* 31 32* 33* 34* 36 37 38 4* 40 41 43* 47 49 5*** 50* 51 52 54* 55 56 57 59 60 61* 62 64* 65** 66 67 68 69** 7 70** 74 75 76** 80* 81 82 83 87* 88 9* 90 93** 96 97 99*
  fabian  ~    SysProg  aufgabe3 [  main ≡  ?1 ~1 -1 ] 



Verhält sich das C-Programm bei allen Eingaben wie das Java-Programm?
    Jo.

Fehler?
    Nö

 ----------------------------------------------------------------------------------------------------------------

  fabian  ~    SysProg  aufgabe3 [  main ≡  ?1 ~1 -1 ] make TARGET=stringsort-optimiert   
gcc -g -Wall -Wextra -Werror -Wvla -std=c11 -pedantic    stringsort-optimiert.c   -o stringsort-optimiert
  fabian  ~    SysProg  aufgabe3 [  main ≡  ?1 ~1 ] make TARGET=stringsort-optimiert cppcheck
cppcheck --enable=warning,style --std=c11 stringsort-optimiert.c
Checking stringsort-optimiert.c ...
stringsort-optimiert.c:31:26: style: Parameter 'argv' can be declared as const array [constParameter]
int main(int argc, char *argv[])
                         ^
Active checkers: 106/565
  fabian  ~    SysProg  aufgabe3 [  main ≡  ?1 ~1 ] ./stringsort-optimiert 200 
Unsortiertes Array:
119 128 145 140 100 57 127 160 81 75 127 183 115 92 106 38 32 142 159 190 198 64 132 72 122 144 132 95 6 50 97 77 178 42 17 79 52 96 191 85 123 119 20 38 11 127 76 43 69 36 186 19 52 70 92 126 166 24 21 124 74 118 2 5 112 19 36 116 68 27 1 191 98 174 30 62 101 106 57 122 94 195 94 98 66 138 24 184 162 45 109 189 115 63 146 180 34 134 96 102 161 50 94 12 24 124 74 125 182 131 199 29 127 93 127 145 31 152 129 146 149 190 87 65 53 185 45 88 119 93 190 32 143 36 44 167 160 118 44 95 2 196 124 81 89 51 26 73 155 107 171 105 50 58 170 103 195 167 143 114 60 86 146 156 122 143 123 35 13 120 130 15 116 54 48 157 57 74 30 13 134 153 118 184 11 40 87 6 159 183 72 171 69 171 127 191 66 3 26 79 
Sortiertes Array:
1 100 101 102 103 105 106* 107 109 11* 112 114 115* 116* 118** 119** 12 120 122** 123* 124** 125 126 127***** 128 129 13* 130 131 132* 134* 138 140 142 143** 144 145* 146** 149 15 152 153 155 156 157 159* 160* 161 162 166 167* 17 170 171** 174 178 180 182 183* 184* 185 186 189 19* 190** 191** 195* 196 198 199 2* 20 21 24** 26* 27 29 3 30* 31 32* 34 35 36** 38* 40 42 43 44* 45* 48 5 50** 51 52* 53 54 57** 58 6* 60 62 63 64 65 66* 68 69* 70 72* 73 74** 75 76 77 79* 81* 85 86 87* 88 89 92* 93* 94** 95* 96* 97 98*
  fabian  ~    SysProg  aufgabe3 [  main ≡  ?1 ~1 ] valgrind ./stringsort-optimiert 200 
==16402== Memcheck, a memory error detector
==16402== Copyright (C) 2002-2022, and GNU GPL'd, by Julian Seward et al.
==16402== Using Valgrind-3.21.0 and LibVEX; rerun with -h for copyright info
==16402== Command: ./stringsort-optimiert 200
==16402== 
Unsortiertes Array:
33 118 108 189 190 28 43 62 37 5 187 70 122 96 185 17 16 62 159 172 180 91 195 118 73 42 70 64 186 11 14 171 129 122 112 71 103 155 133 140 113 120 162 35 168 99 52 185 113 163 109 93 54 104 163 79 147 33 144 85 44 158 56 125 33 168 149 136 75 82 28 188 155 142 176 123 42 180 60 155 144 169 1 150 26 116 30 125 150 126 10 146 36 18 24 69 186 173 157 13 7 137 154 162 32 130 38 74 110 50 181 6 172 134 157 198 51 139 123 153 65 85 99 101 103 123 123 41 96 32 54 56 122 160 170 154 42 8 180 153 59 113 159 183 0 68 181 3 159 56 156 24 141 55 78 44 131 153 37 179 185 91 35 107 4 6 61 46 14 193 151 25 107 63 8 107 131 141 110 91 197 66 67 90 73 145 134 4 50 171 184 36 15 19 95 171 25 109 17 192 
Sortiertes Array:
0 1 10 101 103* 104 107** 108 109* 11 110* 112 113** 116 118* 120 122** 123*** 125* 126 129 13 130 131* 133 134* 136 137 139 14* 140 141* 142 144* 145 146 147 149 15 150* 151 153** 154* 155** 156 157* 158 159** 16 160 162* 163* 168* 169 17* 170 171** 172* 173 176 179 18 180** 181* 183 184 185** 186* 187 188 189 19 190 192 193 195 197 198 24* 25* 26 28* 3 30 32* 33** 35* 36* 37* 38 4* 41 42** 43 44* 46 5 50* 51 52 54* 55 56** 59 6* 60 61 62* 63 64 65 66 67 68 69 7 70* 71 73* 74 75 78 79 8* 82 85* 90 91** 93 95 96* 99*
==16402== 
==16402== HEAP SUMMARY:
==16402==     in use at exit: 0 bytes in 0 blocks
==16402==   total heap usage: 4 allocs, 4 frees, 2,628 bytes allocated
==16402== 
==16402== All heap blocks were freed -- no leaks are possible
==16402== 
==16402== For lists of detected and suppressed errors, rerun with: -s
==16402== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
  fabian  ~    SysProg  aufgabe3 [  main ≡  ?1 ~1 ] time ./stringsort 20000 > /dev/null && time ./stringsort-optimiert 20000 > /dev/null
./stringsort 20000 > /dev/null  1.72s user 0.00s system 99% cpu 1.724 total
./stringsort-optimiert 20000 > /dev/null  1.89s user 0.00s system 99% cpu 1.891 total